//Project 1
/* If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000. */
import UIKit
var count = 0
var  sum = 0;
while count<1000{
    if (count%3 == 0 || count%5 == 0){
        sum = sum+count;
    }
    count++;
}

println(sum)

/* Project 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. */
struct FibonacciPair {
    var current: Int
    var previous: Int
    
    // using the name successor, since that's what Int
    // calls its next-in-sequence function
    func successor() -> FibonacciPair {
        return FibonacciPair(current: current + previous, previous: current)
    }
}

var generator = FibonacciPair(current: 1, previous: 1)
 sum = 0

while generator.current < 4_000_000 {
    if generator.current % 2 == 0 {
        sum += generator.current
    }
    generator = generator.successor()
}

let answer = sum

/*project 3 
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 */

var num = 600851475143
count = 0
for count = 2; count < num; count++ {
    while num%count == 0{
        num = num/count
    }
    if num == 1 {
        break
    }
}
print(count)







